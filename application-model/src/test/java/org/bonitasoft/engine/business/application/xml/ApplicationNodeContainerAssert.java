/**
 * Copyright (C) 2024 Bonitasoft S.A.
 * Bonitasoft, 32 rue Gustave Eiffel - 38000 Grenoble
 * This library is free software; you can redistribute it and/or modify it under the terms
 * of the GNU Lesser General Public License as published by the Free Software Foundation
 * version 2.1 of the License.
 * This library is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY;
 * without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.
 * See the GNU Lesser General Public License for more details.
 * You should have received a copy of the GNU Lesser General Public License along with this
 * program; if not, write to the Free Software Foundation, Inc., 51 Franklin Street, Fifth
 * Floor, Boston, MA 02110-1301, USA.
 **/
package org.bonitasoft.engine.business.application.xml;

import org.assertj.core.api.AbstractObjectAssert;
import org.assertj.core.internal.Iterables;

/**
 * {@link ApplicationNodeContainer} specific assertions - Generated by CustomAssertionGenerator.
 */
public class ApplicationNodeContainerAssert
        extends AbstractObjectAssert<ApplicationNodeContainerAssert, ApplicationNodeContainer> {

    /**
     * Creates a new <code>{@link ApplicationNodeContainerAssert}</code> to make assertions on actual ApplicationNodeContainer.
     * 
     * @param actual the ApplicationNodeContainer we want to make assertions on.
     */
    public ApplicationNodeContainerAssert(ApplicationNodeContainer actual) {
        super(actual, ApplicationNodeContainerAssert.class);
    }

    /**
     * An entry point for ApplicationNodeContainerAssert to follow AssertJ standard <code>assertThat()</code> statements.<br>
     * With a static import, one can write directly: <code>assertThat(myApplicationNodeContainer)</code> and get specific assertion with code completion.
     * 
     * @param actual the ApplicationNodeContainer we want to make assertions on.
     * @return a new <code>{@link ApplicationNodeContainerAssert}</code>
     */
    @org.assertj.core.util.CheckReturnValue
    public static ApplicationNodeContainerAssert assertThat(ApplicationNodeContainer actual) {
        return new ApplicationNodeContainerAssert(actual);
    }

    /**
     * Verifies that the actual ApplicationNodeContainer's advancedApplications contains the given AdvancedApplicationNode elements.
     * 
     * @param advancedApplications the given elements that should be contained in actual ApplicationNodeContainer's advancedApplications.
     * @return this assertion object.
     * @throws AssertionError if the actual ApplicationNodeContainer's advancedApplications does not contain all given AdvancedApplicationNode elements.
     */
    public ApplicationNodeContainerAssert hasAdvancedApplications(AdvancedApplicationNode... advancedApplications) {
        // check that actual ApplicationNodeContainer we want to make assertions on is not null.
        isNotNull();

        // check that given AdvancedApplicationNode varargs is not null.
        if (advancedApplications == null)
            failWithMessage("Expecting advancedApplications parameter not to be null.");

        // check with standard error message, to set another message call: info.overridingErrorMessage("my error message");
        Iterables.instance().assertContains(info, actual.getAdvancedApplications(), advancedApplications);

        // return the current assertion for method chaining
        return this;
    }

    /**
     * Verifies that the actual ApplicationNodeContainer's advancedApplications contains the given AdvancedApplicationNode elements in Collection.
     * 
     * @param advancedApplications the given elements that should be contained in actual ApplicationNodeContainer's advancedApplications.
     * @return this assertion object.
     * @throws AssertionError if the actual ApplicationNodeContainer's advancedApplications does not contain all given AdvancedApplicationNode elements.
     */
    public ApplicationNodeContainerAssert hasAdvancedApplications(
            java.util.Collection<? extends AdvancedApplicationNode> advancedApplications) {
        // check that actual ApplicationNodeContainer we want to make assertions on is not null.
        isNotNull();

        // check that given AdvancedApplicationNode collection is not null.
        if (advancedApplications == null) {
            failWithMessage("Expecting advancedApplications parameter not to be null.");
            return this; // to fool Eclipse "Null pointer access" warning on toArray.
        }

        // check with standard error message, to set another message call: info.overridingErrorMessage("my error message");
        Iterables.instance().assertContains(info, actual.getAdvancedApplications(), advancedApplications.toArray());

        // return the current assertion for method chaining
        return this;
    }

    /**
     * Verifies that the actual ApplicationNodeContainer's advancedApplications contains <b>only</b> the given AdvancedApplicationNode elements and nothing else in
     * whatever order.
     * 
     * @param advancedApplications the given elements that should be contained in actual ApplicationNodeContainer's advancedApplications.
     * @return this assertion object.
     * @throws AssertionError if the actual ApplicationNodeContainer's advancedApplications does not contain all given AdvancedApplicationNode elements.
     */
    public ApplicationNodeContainerAssert hasOnlyAdvancedApplications(AdvancedApplicationNode... advancedApplications) {
        // check that actual ApplicationNodeContainer we want to make assertions on is not null.
        isNotNull();

        // check that given AdvancedApplicationNode varargs is not null.
        if (advancedApplications == null)
            failWithMessage("Expecting advancedApplications parameter not to be null.");

        // check with standard error message, to set another message call: info.overridingErrorMessage("my error message");
        Iterables.instance().assertContainsOnly(info, actual.getAdvancedApplications(), advancedApplications);

        // return the current assertion for method chaining
        return this;
    }

    /**
     * Verifies that the actual ApplicationNodeContainer's advancedApplications contains <b>only</b> the given AdvancedApplicationNode elements in Collection and
     * nothing else in whatever order.
     * 
     * @param advancedApplications the given elements that should be contained in actual ApplicationNodeContainer's advancedApplications.
     * @return this assertion object.
     * @throws AssertionError if the actual ApplicationNodeContainer's advancedApplications does not contain all given AdvancedApplicationNode elements.
     */
    public ApplicationNodeContainerAssert hasOnlyAdvancedApplications(
            java.util.Collection<? extends AdvancedApplicationNode> advancedApplications) {
        // check that actual ApplicationNodeContainer we want to make assertions on is not null.
        isNotNull();

        // check that given AdvancedApplicationNode collection is not null.
        if (advancedApplications == null) {
            failWithMessage("Expecting advancedApplications parameter not to be null.");
            return this; // to fool Eclipse "Null pointer access" warning on toArray.
        }

        // check with standard error message, to set another message call: info.overridingErrorMessage("my error message");
        Iterables.instance().assertContainsOnly(info, actual.getAdvancedApplications(), advancedApplications.toArray());

        // return the current assertion for method chaining
        return this;
    }

    /**
     * Verifies that the actual ApplicationNodeContainer's advancedApplications does not contain the given AdvancedApplicationNode elements.
     *
     * @param advancedApplications the given elements that should not be in actual ApplicationNodeContainer's advancedApplications.
     * @return this assertion object.
     * @throws AssertionError if the actual ApplicationNodeContainer's advancedApplications contains any given AdvancedApplicationNode elements.
     */
    public ApplicationNodeContainerAssert doesNotHaveAdvancedApplications(
            AdvancedApplicationNode... advancedApplications) {
        // check that actual ApplicationNodeContainer we want to make assertions on is not null.
        isNotNull();

        // check that given AdvancedApplicationNode varargs is not null.
        if (advancedApplications == null)
            failWithMessage("Expecting advancedApplications parameter not to be null.");

        // check with standard error message (use overridingErrorMessage before contains to set your own message).
        Iterables.instance().assertDoesNotContain(info, actual.getAdvancedApplications(), advancedApplications);

        // return the current assertion for method chaining
        return this;
    }

    /**
     * Verifies that the actual ApplicationNodeContainer's advancedApplications does not contain the given AdvancedApplicationNode elements in Collection.
     *
     * @param advancedApplications the given elements that should not be in actual ApplicationNodeContainer's advancedApplications.
     * @return this assertion object.
     * @throws AssertionError if the actual ApplicationNodeContainer's advancedApplications contains any given AdvancedApplicationNode elements.
     */
    public ApplicationNodeContainerAssert doesNotHaveAdvancedApplications(
            java.util.Collection<? extends AdvancedApplicationNode> advancedApplications) {
        // check that actual ApplicationNodeContainer we want to make assertions on is not null.
        isNotNull();

        // check that given AdvancedApplicationNode collection is not null.
        if (advancedApplications == null) {
            failWithMessage("Expecting advancedApplications parameter not to be null.");
            return this; // to fool Eclipse "Null pointer access" warning on toArray.
        }

        // check with standard error message (use overridingErrorMessage before contains to set your own message).
        Iterables.instance().assertDoesNotContain(info, actual.getAdvancedApplications(),
                advancedApplications.toArray());

        // return the current assertion for method chaining
        return this;
    }

    /**
     * Verifies that the actual ApplicationNodeContainer has no advancedApplications.
     * 
     * @return this assertion object.
     * @throws AssertionError if the actual ApplicationNodeContainer's advancedApplications is not empty.
     */
    public ApplicationNodeContainerAssert hasNoAdvancedApplications() {
        // check that actual ApplicationNodeContainer we want to make assertions on is not null.
        isNotNull();

        // we override the default error message with a more explicit one
        String assertjErrorMessage = "\nExpecting :\n  <%s>\nnot to have advancedApplications but had :\n  <%s>";

        // check
        if (actual.getAdvancedApplications().iterator().hasNext()) {
            failWithMessage(assertjErrorMessage, actual, actual.getAdvancedApplications());
        }

        // return the current assertion for method chaining
        return this;
    }

    /**
     * Verifies that the actual ApplicationNodeContainer's allApplications contains the given AbstractApplicationNode elements.
     * 
     * @param allApplications the given elements that should be contained in actual ApplicationNodeContainer's allApplications.
     * @return this assertion object.
     * @throws AssertionError if the actual ApplicationNodeContainer's allApplications does not contain all given AbstractApplicationNode elements.
     */
    public ApplicationNodeContainerAssert hasAllApplications(AbstractApplicationNode... allApplications) {
        // check that actual ApplicationNodeContainer we want to make assertions on is not null.
        isNotNull();

        // check that given AbstractApplicationNode varargs is not null.
        if (allApplications == null)
            failWithMessage("Expecting allApplications parameter not to be null.");

        // check with standard error message, to set another message call: info.overridingErrorMessage("my error message");
        Iterables.instance().assertContains(info, actual.getAllApplications(), allApplications);

        // return the current assertion for method chaining
        return this;
    }

    /**
     * Verifies that the actual ApplicationNodeContainer's allApplications contains the given AbstractApplicationNode elements in Collection.
     * 
     * @param allApplications the given elements that should be contained in actual ApplicationNodeContainer's allApplications.
     * @return this assertion object.
     * @throws AssertionError if the actual ApplicationNodeContainer's allApplications does not contain all given AbstractApplicationNode elements.
     */
    public ApplicationNodeContainerAssert hasAllApplications(
            java.util.Collection<? extends AbstractApplicationNode> allApplications) {
        // check that actual ApplicationNodeContainer we want to make assertions on is not null.
        isNotNull();

        // check that given AbstractApplicationNode collection is not null.
        if (allApplications == null) {
            failWithMessage("Expecting allApplications parameter not to be null.");
            return this; // to fool Eclipse "Null pointer access" warning on toArray.
        }

        // check with standard error message, to set another message call: info.overridingErrorMessage("my error message");
        Iterables.instance().assertContains(info, actual.getAllApplications(), allApplications.toArray());

        // return the current assertion for method chaining
        return this;
    }

    /**
     * Verifies that the actual ApplicationNodeContainer's allApplications contains <b>only</b> the given AbstractApplicationNode elements and nothing else in
     * whatever order.
     * 
     * @param allApplications the given elements that should be contained in actual ApplicationNodeContainer's allApplications.
     * @return this assertion object.
     * @throws AssertionError if the actual ApplicationNodeContainer's allApplications does not contain all given AbstractApplicationNode elements.
     */
    public ApplicationNodeContainerAssert hasOnlyAllApplications(AbstractApplicationNode... allApplications) {
        // check that actual ApplicationNodeContainer we want to make assertions on is not null.
        isNotNull();

        // check that given AbstractApplicationNode varargs is not null.
        if (allApplications == null)
            failWithMessage("Expecting allApplications parameter not to be null.");

        // check with standard error message, to set another message call: info.overridingErrorMessage("my error message");
        Iterables.instance().assertContainsOnly(info, actual.getAllApplications(), allApplications);

        // return the current assertion for method chaining
        return this;
    }

    /**
     * Verifies that the actual ApplicationNodeContainer's allApplications contains <b>only</b> the given AbstractApplicationNode elements in Collection and nothing
     * else in whatever order.
     * 
     * @param allApplications the given elements that should be contained in actual ApplicationNodeContainer's allApplications.
     * @return this assertion object.
     * @throws AssertionError if the actual ApplicationNodeContainer's allApplications does not contain all given AbstractApplicationNode elements.
     */
    public ApplicationNodeContainerAssert hasOnlyAllApplications(
            java.util.Collection<? extends AbstractApplicationNode> allApplications) {
        // check that actual ApplicationNodeContainer we want to make assertions on is not null.
        isNotNull();

        // check that given AbstractApplicationNode collection is not null.
        if (allApplications == null) {
            failWithMessage("Expecting allApplications parameter not to be null.");
            return this; // to fool Eclipse "Null pointer access" warning on toArray.
        }

        // check with standard error message, to set another message call: info.overridingErrorMessage("my error message");
        Iterables.instance().assertContainsOnly(info, actual.getAllApplications(), allApplications.toArray());

        // return the current assertion for method chaining
        return this;
    }

    /**
     * Verifies that the actual ApplicationNodeContainer's allApplications does not contain the given AbstractApplicationNode elements.
     *
     * @param allApplications the given elements that should not be in actual ApplicationNodeContainer's allApplications.
     * @return this assertion object.
     * @throws AssertionError if the actual ApplicationNodeContainer's allApplications contains any given AbstractApplicationNode elements.
     */
    public ApplicationNodeContainerAssert doesNotHaveAllApplications(AbstractApplicationNode... allApplications) {
        // check that actual ApplicationNodeContainer we want to make assertions on is not null.
        isNotNull();

        // check that given AbstractApplicationNode varargs is not null.
        if (allApplications == null)
            failWithMessage("Expecting allApplications parameter not to be null.");

        // check with standard error message (use overridingErrorMessage before contains to set your own message).
        Iterables.instance().assertDoesNotContain(info, actual.getAllApplications(), allApplications);

        // return the current assertion for method chaining
        return this;
    }

    /**
     * Verifies that the actual ApplicationNodeContainer's allApplications does not contain the given AbstractApplicationNode elements in Collection.
     *
     * @param allApplications the given elements that should not be in actual ApplicationNodeContainer's allApplications.
     * @return this assertion object.
     * @throws AssertionError if the actual ApplicationNodeContainer's allApplications contains any given AbstractApplicationNode elements.
     */
    public ApplicationNodeContainerAssert doesNotHaveAllApplications(
            java.util.Collection<? extends AbstractApplicationNode> allApplications) {
        // check that actual ApplicationNodeContainer we want to make assertions on is not null.
        isNotNull();

        // check that given AbstractApplicationNode collection is not null.
        if (allApplications == null) {
            failWithMessage("Expecting allApplications parameter not to be null.");
            return this; // to fool Eclipse "Null pointer access" warning on toArray.
        }

        // check with standard error message (use overridingErrorMessage before contains to set your own message).
        Iterables.instance().assertDoesNotContain(info, actual.getAllApplications(), allApplications.toArray());

        // return the current assertion for method chaining
        return this;
    }

    /**
     * Verifies that the actual ApplicationNodeContainer has no allApplications.
     * 
     * @return this assertion object.
     * @throws AssertionError if the actual ApplicationNodeContainer's allApplications is not empty.
     */
    public ApplicationNodeContainerAssert hasNoAllApplications() {
        // check that actual ApplicationNodeContainer we want to make assertions on is not null.
        isNotNull();

        // we override the default error message with a more explicit one
        String assertjErrorMessage = "\nExpecting :\n  <%s>\nnot to have allApplications but had :\n  <%s>";

        // check
        if (actual.getAllApplications().iterator().hasNext()) {
            failWithMessage(assertjErrorMessage, actual, actual.getAllApplications());
        }

        // return the current assertion for method chaining
        return this;
    }

    /**
     * Verifies that the actual ApplicationNodeContainer's applications contains the given ApplicationNode elements.
     * 
     * @param applications the given elements that should be contained in actual ApplicationNodeContainer's applications.
     * @return this assertion object.
     * @throws AssertionError if the actual ApplicationNodeContainer's applications does not contain all given ApplicationNode elements.
     */
    public ApplicationNodeContainerAssert hasApplications(ApplicationNode... applications) {
        // check that actual ApplicationNodeContainer we want to make assertions on is not null.
        isNotNull();

        // check that given ApplicationNode varargs is not null.
        if (applications == null)
            failWithMessage("Expecting applications parameter not to be null.");

        // check with standard error message, to set another message call: info.overridingErrorMessage("my error message");
        Iterables.instance().assertContains(info, actual.getApplications(), applications);

        // return the current assertion for method chaining
        return this;
    }

    /**
     * Verifies that the actual ApplicationNodeContainer's applications contains the given ApplicationNode elements in Collection.
     * 
     * @param applications the given elements that should be contained in actual ApplicationNodeContainer's applications.
     * @return this assertion object.
     * @throws AssertionError if the actual ApplicationNodeContainer's applications does not contain all given ApplicationNode elements.
     */
    public ApplicationNodeContainerAssert hasApplications(
            java.util.Collection<? extends ApplicationNode> applications) {
        // check that actual ApplicationNodeContainer we want to make assertions on is not null.
        isNotNull();

        // check that given ApplicationNode collection is not null.
        if (applications == null) {
            failWithMessage("Expecting applications parameter not to be null.");
            return this; // to fool Eclipse "Null pointer access" warning on toArray.
        }

        // check with standard error message, to set another message call: info.overridingErrorMessage("my error message");
        Iterables.instance().assertContains(info, actual.getApplications(), applications.toArray());

        // return the current assertion for method chaining
        return this;
    }

    /**
     * Verifies that the actual ApplicationNodeContainer's applications contains <b>only</b> the given ApplicationNode elements and nothing else in whatever order.
     * 
     * @param applications the given elements that should be contained in actual ApplicationNodeContainer's applications.
     * @return this assertion object.
     * @throws AssertionError if the actual ApplicationNodeContainer's applications does not contain all given ApplicationNode elements.
     */
    public ApplicationNodeContainerAssert hasOnlyApplications(ApplicationNode... applications) {
        // check that actual ApplicationNodeContainer we want to make assertions on is not null.
        isNotNull();

        // check that given ApplicationNode varargs is not null.
        if (applications == null)
            failWithMessage("Expecting applications parameter not to be null.");

        // check with standard error message, to set another message call: info.overridingErrorMessage("my error message");
        Iterables.instance().assertContainsOnly(info, actual.getApplications(), applications);

        // return the current assertion for method chaining
        return this;
    }

    /**
     * Verifies that the actual ApplicationNodeContainer's applications contains <b>only</b> the given ApplicationNode elements in Collection and nothing else in
     * whatever order.
     * 
     * @param applications the given elements that should be contained in actual ApplicationNodeContainer's applications.
     * @return this assertion object.
     * @throws AssertionError if the actual ApplicationNodeContainer's applications does not contain all given ApplicationNode elements.
     */
    public ApplicationNodeContainerAssert hasOnlyApplications(
            java.util.Collection<? extends ApplicationNode> applications) {
        // check that actual ApplicationNodeContainer we want to make assertions on is not null.
        isNotNull();

        // check that given ApplicationNode collection is not null.
        if (applications == null) {
            failWithMessage("Expecting applications parameter not to be null.");
            return this; // to fool Eclipse "Null pointer access" warning on toArray.
        }

        // check with standard error message, to set another message call: info.overridingErrorMessage("my error message");
        Iterables.instance().assertContainsOnly(info, actual.getApplications(), applications.toArray());

        // return the current assertion for method chaining
        return this;
    }

    /**
     * Verifies that the actual ApplicationNodeContainer's applications does not contain the given ApplicationNode elements.
     *
     * @param applications the given elements that should not be in actual ApplicationNodeContainer's applications.
     * @return this assertion object.
     * @throws AssertionError if the actual ApplicationNodeContainer's applications contains any given ApplicationNode elements.
     */
    public ApplicationNodeContainerAssert doesNotHaveApplications(ApplicationNode... applications) {
        // check that actual ApplicationNodeContainer we want to make assertions on is not null.
        isNotNull();

        // check that given ApplicationNode varargs is not null.
        if (applications == null)
            failWithMessage("Expecting applications parameter not to be null.");

        // check with standard error message (use overridingErrorMessage before contains to set your own message).
        Iterables.instance().assertDoesNotContain(info, actual.getApplications(), applications);

        // return the current assertion for method chaining
        return this;
    }

    /**
     * Verifies that the actual ApplicationNodeContainer's applications does not contain the given ApplicationNode elements in Collection.
     *
     * @param applications the given elements that should not be in actual ApplicationNodeContainer's applications.
     * @return this assertion object.
     * @throws AssertionError if the actual ApplicationNodeContainer's applications contains any given ApplicationNode elements.
     */
    public ApplicationNodeContainerAssert doesNotHaveApplications(
            java.util.Collection<? extends ApplicationNode> applications) {
        // check that actual ApplicationNodeContainer we want to make assertions on is not null.
        isNotNull();

        // check that given ApplicationNode collection is not null.
        if (applications == null) {
            failWithMessage("Expecting applications parameter not to be null.");
            return this; // to fool Eclipse "Null pointer access" warning on toArray.
        }

        // check with standard error message (use overridingErrorMessage before contains to set your own message).
        Iterables.instance().assertDoesNotContain(info, actual.getApplications(), applications.toArray());

        // return the current assertion for method chaining
        return this;
    }

    /**
     * Verifies that the actual ApplicationNodeContainer has no applications.
     * 
     * @return this assertion object.
     * @throws AssertionError if the actual ApplicationNodeContainer's applications is not empty.
     */
    public ApplicationNodeContainerAssert hasNoApplications() {
        // check that actual ApplicationNodeContainer we want to make assertions on is not null.
        isNotNull();

        // we override the default error message with a more explicit one
        String assertjErrorMessage = "\nExpecting :\n  <%s>\nnot to have applications but had :\n  <%s>";

        // check
        if (actual.getApplications().iterator().hasNext()) {
            failWithMessage(assertjErrorMessage, actual, actual.getApplications());
        }

        // return the current assertion for method chaining
        return this;
    }

}
